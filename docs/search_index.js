var documenterSearchIndex = {"docs":
[{"location":"Reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"Reference/#API","page":"Reference","title":"API","text":"","category":"section"},{"location":"Reference/","page":"Reference","title":"Reference","text":"Modules = [NMRlab, NMRlab.FileIO]\nOrder   = [:module,:type,:function,:method]","category":"page"},{"location":"Reference/#NMRlab.NMRProcessor","page":"Reference","title":"NMRlab.NMRProcessor","text":"abstract type NMRProcessor <: Function end\n\nAbstract data type for NMR processing routines.  New processing tools should be declared as subtypes of NMRProcessor.\n\n\n\n\n\n","category":"type"},{"location":"Reference/#NMRlab.Chain-Tuple{Vararg{NMRlab.NMRProcessor}}","page":"Reference","title":"NMRlab.Chain","text":"Chain(fs::Vararg{NMRProcessor})\n\ncreate a chain of processing tools, which will be applied in order (the first in the argument list is  applied first)\n\n\n\n\n\n","category":"method"},{"location":"Reference/#NMRlab.FileIO","page":"Reference","title":"NMRlab.FileIO","text":"module FileIO\n\ncontains low-level code to import vendor-specific NMR data files.\n\n\n\n\n\n","category":"module"},{"location":"Reference/#NMRlab.FileIO.readBrukerFID-Tuple{String}","page":"Reference","title":"NMRlab.FileIO.readBrukerFID","text":"Bruker.readBrukerFID(s::String; format=Float64)\n\nreads a Bruker fid or ser file and returns the data contained in it as a complex array. For files generated by TopSpin 4.0 and higher, the default format (Float64) will work. For TopSpin 2.0, use format=Int32.\n\n\n\n\n\n","category":"method"},{"location":"Reference/#NMRlab.FileIO.readBrukerParameterFile-Tuple{String}","page":"Reference","title":"NMRlab.FileIO.readBrukerParameterFile","text":"readBrukerParameterFile(s::String)\n\nreads a Bruker JCAMP-DX parameter file, and returns a dict with the values. Arrays such as D0 D1 D2 etc are returned as a Julia array. Note that the Bruker parameter D0 appears as param[\"D\"][1] due to Julia using 1-based arrays.\n\n\n\n\n\n","category":"method"},{"location":"Reference/#NMRlab.FileIO.readJEOL-Tuple{IOStream}","page":"Reference","title":"NMRlab.FileIO.readJEOL","text":"function readJEOL(s::IOStream) -> (header,params,data)\n\nreads a JEOL .jdf file from the stream s. header contains a dictionary with the file header values, params is a dictionary of parameters. Each parameter contains a tuple (scaler::Int,units,value).\n\ndata is a raw data vector, which needs to be reshaped into the correct form depending on the parameters. This is handled by a separate function.\n\n\n\n\n\n","category":"method"},{"location":"Reference/#NMRlab.FileIO.reshapeJEOL-Tuple{Any, Any, Any}","page":"Reference","title":"NMRlab.FileIO.reshapeJEOL","text":"function reshapeJEOL(header,params,data<:AbstractArray)\n\nuses the header and parameter data to reshape the data. Returns an Array with the correctly shaped data. \n\nwarning: Not implemented yet!\nThis function is not yet implemented. It will rely on the new data type, and will return a valid SpectData array, including the correct axes and coordinate information.\n\n\n\n\n\n","category":"method"},{"location":"Reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"Reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"A set of tools for processing, plotting, and interpreting NMR data","category":"page"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"#Contents","page":"Overview","title":"Contents","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"NMRlab.jl is a library of tools for the processing, plotting, and interpretation of NMR data. The project started out as an internal quick-and-dirty set of tools in the Utz research laboratory at the University of Southampton. At the time, Julia was in a very early stage, and its use was experimental. In the meantime, a sizeable number of research projects have been carried out in the group using early versions of NMR.jl, and it seemed like a good idea to complete the tools and the documentation, and make the package available to the community.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"note: Applications\nNMR.jl is intended to be applicable to any kind of NMR data, and aims at implementing a broad set of features to enable even advanced NMR data processing. Some of its functionality is designed for convenience, making everyday tasks  accessible with a reasonable default set of parameters. Power users may want to use the more low-level routines, which are underlying the high-level interface.","category":"page"},{"location":"#Manual-Outline","page":"Overview","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"If you would like to jump right in, read the Getting started section. For a more in-depth and complete documentation, refer to the Manual. Finally, a complete list and documentation of every function  can be found under API.","category":"page"},{"location":"#Feedback","page":"Overview","title":"Feedback","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"NMR.jlis still under active development, and we would appreciate your feedback, including feature requests, bug reports, and general comments. Please contact marcel.utz@kit.edu by email.","category":"page"},{"location":"#Citing-NMRlab.jl","page":"Overview","title":"Citing NMRlab.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"If you publish your work and have been using NMR.jl to process, present, and/or interpret your data, we would appreciate if you could acknowledge this by citing our work. The reference is TBA.","category":"page"}]
}
